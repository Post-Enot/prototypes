//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/BattleArenaInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IUP.BattleSystemPrototype.Input
{
    public partial class @BattleArenaInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BattleArenaInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattleArenaInputActions"",
    ""maps"": [
        {
            ""name"": ""Main Hero"",
            ""id"": ""60a84733-abe4-4f49-bf5e-643b646c3fc4"",
            ""actions"": [
                {
                    ""name"": ""Direction Up"",
                    ""type"": ""Button"",
                    ""id"": ""b24175de-3288-4c6b-93ab-bf50eb4d7e97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction Down"",
                    ""type"": ""Button"",
                    ""id"": ""50f932fd-89ca-44f4-8705-77b1d00e20ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction Right"",
                    ""type"": ""Button"",
                    ""id"": ""032eac33-f61b-4dd5-9643-1ff5ee556eab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction Left"",
                    ""type"": ""Button"",
                    ""id"": ""08736045-a978-43c6-b65f-a9f6f8e82e5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71184ada-f86b-4c4d-afbd-4c5644ddc88e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b4d97f-5e12-45c2-99ef-a7f80e797196"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b75a269e-f0d5-4293-b4a9-73a44311c2e1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a21e4ed-aa82-4cbf-9721-ff30e6d67e21"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""971f1304-8bad-4a41-a509-d396897c1929"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""392aeea0-4e2d-47d5-8c9a-713a945a3a23"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c3ae5d1-8b17-409b-a64f-8f2ef70d51c7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aab77a9-53be-469f-acb4-9569130c0ad8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Main Hero
            m_MainHero = asset.FindActionMap("Main Hero", throwIfNotFound: true);
            m_MainHero_DirectionUp = m_MainHero.FindAction("Direction Up", throwIfNotFound: true);
            m_MainHero_DirectionDown = m_MainHero.FindAction("Direction Down", throwIfNotFound: true);
            m_MainHero_DirectionRight = m_MainHero.FindAction("Direction Right", throwIfNotFound: true);
            m_MainHero_DirectionLeft = m_MainHero.FindAction("Direction Left", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main Hero
        private readonly InputActionMap m_MainHero;
        private IMainHeroActions m_MainHeroActionsCallbackInterface;
        private readonly InputAction m_MainHero_DirectionUp;
        private readonly InputAction m_MainHero_DirectionDown;
        private readonly InputAction m_MainHero_DirectionRight;
        private readonly InputAction m_MainHero_DirectionLeft;
        public struct MainHeroActions
        {
            private @BattleArenaInputActions m_Wrapper;
            public MainHeroActions(@BattleArenaInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @DirectionUp => m_Wrapper.m_MainHero_DirectionUp;
            public InputAction @DirectionDown => m_Wrapper.m_MainHero_DirectionDown;
            public InputAction @DirectionRight => m_Wrapper.m_MainHero_DirectionRight;
            public InputAction @DirectionLeft => m_Wrapper.m_MainHero_DirectionLeft;
            public InputActionMap Get() { return m_Wrapper.m_MainHero; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainHeroActions set) { return set.Get(); }
            public void SetCallbacks(IMainHeroActions instance)
            {
                if (m_Wrapper.m_MainHeroActionsCallbackInterface != null)
                {
                    @DirectionUp.started -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionUp;
                    @DirectionUp.performed -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionUp;
                    @DirectionUp.canceled -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionUp;
                    @DirectionDown.started -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionDown;
                    @DirectionDown.performed -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionDown;
                    @DirectionDown.canceled -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionDown;
                    @DirectionRight.started -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionRight;
                    @DirectionRight.performed -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionRight;
                    @DirectionRight.canceled -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionRight;
                    @DirectionLeft.started -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionLeft;
                    @DirectionLeft.performed -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionLeft;
                    @DirectionLeft.canceled -= m_Wrapper.m_MainHeroActionsCallbackInterface.OnDirectionLeft;
                }
                m_Wrapper.m_MainHeroActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @DirectionUp.started += instance.OnDirectionUp;
                    @DirectionUp.performed += instance.OnDirectionUp;
                    @DirectionUp.canceled += instance.OnDirectionUp;
                    @DirectionDown.started += instance.OnDirectionDown;
                    @DirectionDown.performed += instance.OnDirectionDown;
                    @DirectionDown.canceled += instance.OnDirectionDown;
                    @DirectionRight.started += instance.OnDirectionRight;
                    @DirectionRight.performed += instance.OnDirectionRight;
                    @DirectionRight.canceled += instance.OnDirectionRight;
                    @DirectionLeft.started += instance.OnDirectionLeft;
                    @DirectionLeft.performed += instance.OnDirectionLeft;
                    @DirectionLeft.canceled += instance.OnDirectionLeft;
                }
            }
        }
        public MainHeroActions @MainHero => new MainHeroActions(this);
        public interface IMainHeroActions
        {
            void OnDirectionUp(InputAction.CallbackContext context);
            void OnDirectionDown(InputAction.CallbackContext context);
            void OnDirectionRight(InputAction.CallbackContext context);
            void OnDirectionLeft(InputAction.CallbackContext context);
        }
    }
}
